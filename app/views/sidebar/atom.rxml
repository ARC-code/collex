xml.instruct! :xml, :version=>"1.0", :encoding=>"UTF-8"
xml.feed "xml:lang" => "en-US", "xmlns" => 'http://www.w3.org/2005/Atom' do
  xml.title "Collex - #{params[:type]}:#{params[:value]}"
#  xml.subtitle "tags", "type"=>"html"
  xml.id url_for(:only_path => false)
  xml.updated Date.today.strftime("%Y-%m-%dT%H:%M:%SZ")  # TODO get the latest item's date collected
  xml.generator "Collex", :uri => "http://www.nines.org/collex", :version => '4.0'
  xml.link "rel" => "self", "href" => url_for(:only_path => false)
  xml.link "rel" => "alternate", "type" => "text/html", "href" => url_for(:only_path => false, :controller=>'sidebar', :action => 'permalink', :view => 'list', :type=>params[:type], :value => params[:value])

#  xml.updated @items.first.updated_at.xmlschema unless @items.empty?  # 2003-12-13T18:30:02Z

  @items['hits'].each do |item|
    xml.entry do
      xml.author do
        name = item['agent'].join(", ")
        xml.name name
      end
      
      xml.updated Date.today.strftime("%Y-%m-%dT%H:%M:%SZ")  # TODO get this item's last collected time
      xml.link "rel" => "alternate", "type" => "text/html", "href" => url_for(:only_path => false, :controller => 'sidebar', :action => 'permalink', :objid => item['uri'], :view => 'detail')
      xml.id url_for(:only_path => false, :controller => 'sidebar', :action => 'permalink', :objid => item['uri'], :view => 'detail')

      #    xml.issued item.created_at.xmlschema
      #    xml.modified item.updated_at.xmlschema
      xml.title item['title']


      #    for category in item.categories
#      xml.dc :subject, "category.name"
      #    end
      #    for tag in item.tags
#      xml.dc :subject, "tag.name"
      #    end

      content = "<p>#{item['title']}<p>"
      content << '<p><img src="' + item['thumbnail'] + '"/></p>' if item['thumbnail']
      content << "<p>Dates: #{item['date_label'].join(', ')}</p>" if item['date_label']
      content << "<p>Genres: #{item['genre'].join(', ')}</p>" if item['genre']

      xml.content content, "type"=>"html"
    end
  end
end
