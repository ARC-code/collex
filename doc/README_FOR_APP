The Collex/NINES project

-----------------------------------------------------------------------
** Steps for creating a collex installation from scratch.

The following steps are explained in detail below:

1) From the Collex repository, download Collex, solr_1.4, and (for the development computer only:) rdf-indexer
2) Install the required gems
3) create site.yml and database.yml
4) Start solr
5) Index some documents
6) Run: rake RAILS_ENV=production collex:update_site
7) Modify About pages
8) Install Wordpress
9) Skin it by changing the css files.
10) add robots file.
11) Start the daemons.

-----------------------------------------------------------------------
** Initial username

After doing the initial migration, a single user has been created:

User name: admin
Password: password

As soon as the site becomes active,
1) sign on using those credentials,
2) switch to the "My Collex" tab, [NOTE: This tab can be renamed below]
3) click "Edit Profile", and change the user name and password to a less obvious one.

You may use the administrator account for your daily use of collex, or you may choose to create a separate
account for using the site. The difference is that the administrator has the "Admin" link that allows maintenance
of the site, and the administrator has a few more privileges, like the ability to delete anyone's post in the
forum and the ability to edit anyone's exhibits.

-----------------------------------------------------------------------
** Requires the following Gems:

image_science (1.1.3) [ for attachment_fu ]
solr-ruby (0.0.8) [ for the connection to solr ]
RubyInline (3.8.4) [ for image_science ]
daemons (1.0.10) [for sending emails in background]

Note that a version newer than that listed should be fine, but has not been tested.

For indexing MARC records, the following are also needed:

Linguistics (1.0.5)
marc (0.3.0)

Note: If you get the message "no such file to load -- rexml/formatters/default" then you need a newer version of Ruby.
v 1.8.7 is recommended.

-----------------------------------------------------------------------
** Requires Wordpress for the News tab

There are instructions for integrating Wordpress that you can read by navigating to "/news".

When changing any files in the Wordpress theme, then a rake task must be called to copy them over to the correct production folder.

For NINES, that task is:
	rake collex:update_nines_theme

-----------------------------------------------------------------------
** Requires Solr

A connection to solr is needed. Typically this will be on the same computer as the deployment. There are a
number of ways to start solr; the following is a suggestion.

If you download the solr_1.4 folder from svn in the same relative place as it appears in svn, you can run the following rake task to
start solr:

	rake solr:start

Note that you will need to index your documents first and put those indexes in the above folder.

That process is explained here:

	http://www.performantsoftware.com/nines_wiki/index.php/Indexing_Tools

There is another relevant project in this repository to help with indexing:

	collex/trunk/rdf-indexer	: This is a java project that builds the utility that is used to read the rdf files into solr. The jar file created
		here is used by the rdf indexing rake tasks.

There are two indexes used: "resources" and "UserContent"
In the solr.xml file, you will need the following:
  <core name="resources" instanceDir="./"/>
  <core name="UserContent" instanceDir="./" schema="schema_user.xml"/>

-----------------------------------------------------------------------
** deploying js and css

The JavaScript in Collex heavily uses prototype and YUI.

When running in production mode, different js and css files are used. The files are compressed and concatinated.

When running in development mode, the js and css files are not touched.

That means that there is no penalty for creating lots of small js and css files and commenting them copiously, because that will
be stripped out of the deployed site.

Each page has its own compressed js and css file.

In production, there are two css files on a page:
- the one for the YUI resources (directed to the Yahoo page so our server doesn't need to handle it)
- the specific one for the page (this is all of our css files compressed and concatinated.)

In production, there are three js files on a page:
- the one for the prototype files, compressed and contatinated.
- the one for the YUI resources (directed to the Yahoo page so our server doesn't need to handle it)
- the specific one for the page (this is all of our js files compressed and concatinated.)

-----------------------------------------------------------------------
** Custom rake tasks

In /lib/tasks/collex.rake, there are a number of rake tasks defined. Here are the most important ones:

--- Development side ---
	rake collex:tag_current_version
	(uses the version number in the model Branding to tag the trunk.)

	rake collex:jslint
	(Runs jslint on all non-minimized js files in /public/javascripts.)

--- Server side ---
	rake collex:update
	This does various things depending on what is defined in site.yml. See the file collex.rake for details about what is
	updated for each type. The various things that are done are:
	- download latest code
	- tag current version
	- backup database
	- run migrations
	- load the wordpress styles
	- compress js and css files

In /lib/tasks/solr.rake, there are routines to manipulate solr.
	To run solr:
	rake solr:start
	To stop solr:
	rake solr:stop
	To zip up the index so that it can be transferred to another computer:
	rake index=resources solr:zip

In /lib/tasks/solr_index.rake, there are a number of tasks for indexing and testing the index. See the file for complete details.
Here are a couple of the more common ones:
	rake folder=XXX solr_index:index_rdf_for_debugging
	rake folder=XXX solr_index:index_rdf_with_fulltext
	rake archive=XXX solr_index:compare_indexes
	rake archive=XXX solr_index:compare_indexes_text
	rake uri=XXX solr_index:examine_solr_document
	rake folder=XXX solr_index:find_duplicate_objects

-----------------------------------------------------------------------
** Site specific info

There are two files missing from this installation that you must supply:

config/database.yml (there is a sample version of this file called config/database.example.yml)
config/site.yml (there is a sample version of this file called config/site.example.yml)

Note that if you use Google Analytics, then you will have to change the code to match your site and credentials. Search
this project for "google-analytics.com" and change all of the references.

Add a robots.txt file to the /public folder. This should contain

User-agent: *
Disallow:

if you want search engines to find it, and

User-agent: *
Disallow: /

if you don't.

-----------------------------------------------------------------------
** About files

The "about" files are all plain .html files so that they can be maintained by a web designer. They do not require knowledge of
ruby, rails, or javascript. There are a couple of pieces of javascript embedded in them that should be kept. One contains the
code to handle the login area and the other handles the popup dialogs in the footer.

-----------------------------------------------------------------------
** Daemons

There are daemons that have to be running in the background all the time. To run them, type:
	RAILS_ENV=development script/daemons start|stop|restart

The default is production, so you can leave off the RAILS_ENV on your deployed sites.
