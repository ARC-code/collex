The Collex/NINES project

-----------------------------------------------------------------------
** Steps for creating a collex installation from scratch.

The following steps are explained in detail below:

1) From the Collex repository, download Collex, solr_1.4, rdf-indexer, and indexer
2) Install the required gems
3) create site.yml and database.yml
4) Start solr
5) Index some documents
6) Run: rake RAILS_ENV="production" collex:update_site
7) Modify About pages
8) Install Wordpress

-----------------------------------------------------------------------
** Requires the following Gems:

image_science (1.1.3) [ for attachment_fu]
solr-ruby (0.0.7) [ for the connection to solr ]

Note that a version newer than that listed should be fine, but has not been tested.

For indexing MARC records, the following are also needed:

Linguistics (1.0.5)
marc (0.3.0)


-----------------------------------------------------------------------
** Requires Wordpress for the News tab

There are instructions for integrating Wordpress that you can read by navigating to "/news".

When changing any files in the Wordpress theme, then a rake task must be called to copy them over to the correct production folder.

For NINES, that task is:
	rake collex:update_nines_theme

-----------------------------------------------------------------------
** Requires Solr

A connection to solr is needed. Typically this will be on the same computer as the deployment.

If you download the solr_1.4 folder from svn in the same relative place as it appears in svn, you can run the following rake task to
start solr:

	rake solr:start

Note that you will need to index your documents first and put those indexes in the above folder.

That process is explained here:

	http://www.performantsoftware.com/nines_wiki/index.php/Indexing_Tools

There are two other relevant projects in this repository to help with indexing:

	collex/trunk/indexer		: This should reside on the computer that will do the indexing. It contains scripts to run the indexing.
	collex/trunk/rdf-indexer	: This is a java project that builds the utility that is used to read the rdf files into solr. The jar file created
		here is used by indexer.

-----------------------------------------------------------------------
** deploying js and css

The JavaScript in Collex heavily uses prototype and YUI.

When running in production mode, different js and css files are used. The files are compressed and concatinated.

When running in development mode, the js and css files are not touched.

That means that there is no penalty for creating lots of small js and css files and commenting them copiously, because that will
be stripped out of the deployed site.

Each page has its own compressed js and css file.

In production, there are two css files on a page:
- the one for the YUI resources (directed to the Yahoo page so our server doesn't need to handle it)
- the specific one for the page (this is all of our css files compressed and concatinated.)

In production, there are three js files on a page:
- the one for the prototype files, compressed and contatinated.
- the one for the YUI resources (directed to the Yahoo page so our server doesn't need to handle it)
- the specific one for the page (this is all of our js files compressed and concatinated.)

-----------------------------------------------------------------------
** Custom rake tasks

In /lib/tasks/collex.rake, there are a number of rake tasks defined. Here are the most important ones:

--- Development side ---
	rake collex:tag_current_version
	(uses the version number in the model Branding to tag the trunk.)

	rake collex:jslint
	(Runs jslint on all non-minimized js files in /public/javascripts.)

--- Server side ---
	rake RAILS_ENV="production" collex:total_update_site
	(downloads the latest code from SVN, runs migrate, updates the wordpress theme, and compresses js and css files)

	rake RAILS_ENV="production" collex:update_site
	(runs migrate, updates the wordpress theme, and compresses js and css files)

In /lib/tasks/solr.rake, there are routines to manipulate solr and its index.
	To run solr:
	rake solr:start

-----------------------------------------------------------------------
** Site specific info

In addition to setting your database.yml file for your specific db settings, there is another file "/config/site.yml" that
must be present. See the file "/config/site.example.yml" for an example of how that should be set up.

Note that if you use Google Analytics, then you will have to change the code to match your site and credentials. Search
this project for "google-analytics.com" and change all of the references.

-----------------------------------------------------------------------
** About files

The "about" files are all plain .html files so that they can be maintained by a web designer. They do not require knowledge of
ruby, rails, or javascript. There are a couple of pieces of javascript embedded in them that should be kept. One contains the
code to handle the login area and the other handles the popup dialogs in the footer.

